#!/usr/bin/env python
import os, sys, argparse
from cpp2py import Cpp2Desc
import cpp2py.libclang_config as config

#
print "Welcome to C++2py"

# --- Parsing the arguments of the script and options

parser = argparse.ArgumentParser(description="""
Generate the C++/Python wrapper desc file from C++ header code
""")

parser.add_argument('filename', help = "Name of the file to parse")

parser.add_argument('--regenerate', '-r',  action='store_true', help="Rebuild the desc file with the shell command written at its head (ignores all other options")

parser.add_argument('--converter', '-C',   action='append',  help='Path to the converter DIRS')

parser.add_argument('--namespace', '-N', action='append',  help="Specify the namespace to explore for classes and function to wrap", default= [])
parser.add_argument('--only', action='append',  help="Specify functions or class to be wrapped", default= [])
parser.add_argument('--outputname', '-o',  help="Name of the xxx_desc.py file [default is same as the filename]", default = '')
parser.add_argument('--modulename', '-m',  help="Name of the Python module [default ='', it will be modulename", default = '')
parser.add_argument('--appname', '-a',  help="Name of the Python module [default ='', it will take the name of file", default = '')
parser.add_argument('--moduledoc',  help="Documentation of the module", default = '')
parser.add_argument('--properties', '-p',  action='store_true',
        help="""Transforms i) every method with no arguments into read-only property
                ii) every method get_X into read-only property
                iii) every couple of methods get_X, set_X into rw property
              """)
parser.add_argument('--members_read_only',  action='store_true',
        help="""Makes members read only (only the getter, not the setter) """)
parser.add_argument('--only_converters',  action='store_true', help="[Experts only] Do not generate the desc file, just the converters if there are")
parser.add_argument('--parse-all-comments',  action='store_true', help="Grab all comments, including non doxygen like")

parser.add_argument('--libclang_location', help='Location of the libclang', default = config.LIBCLANG_LOCATION)
parser.add_argument('--compiler_options', nargs ='*', help='Options to pass to clang')
parser.add_argument('--includes', '-I', action='append',  help='Includes to pass to clang')

args = parser.parse_args()

if args.regenerate : 
    f= open(args.filename)
    f.readline()
    sys.argv[1:] = f.readline().split()[2:] # the second line is the shell command
    args = parser.parse_args() # reparse now that the arguments are changed.

args.includes = (args.includes or []) # +  config.TRIQS_INCLUDE_DEPS.split(';')
#args.includes.append(config.TRIQS_INCLUDE)

# A few variables
# the instruction that created this file
shell_command = ' '.join([ sys.argv[0].rsplit('/')[-1]] + [x if ' ' not in x else '"%s"'%x for x in sys.argv[1:]])
filename_1 = os.path.split(args.filename)[1].split('.',1)[0]

# ---------------------------------------------------------
# Create the worker. It parses the file       
W= Cpp2Desc(filename = args.filename, 
            converters = args.converter or (),  
            namespaces= args.namespace, 
            classes= args.only, 
            use_properties = args.properties,
            modulename = args.modulename or filename_1,
            appname = args.appname or args.modulename or filename_1,
            moduledoc = args.moduledoc,
            members_read_only = args.members_read_only,
            includes = args.includes or (), 
            compiler_options = args.compiler_options,
            libclang_location = args.libclang_location,
            shell_command = shell_command,
            parse_all_comments = args.parse_all_comments,
            namespace_to_factor= () # unused now  
            )

# Make the desc file
W.generate_desc_file(output_filename = (args.outputname or filename_1) + "_desc.py")

